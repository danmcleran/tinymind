/'
* Copyright (c) 2020 Intel Corporation
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*'/

@startuml
title Neural Network Initialization
NeuralNet -> InputLayerType : initializeNeurons
NeuralNet -> InnerHiddenLayerManager : initializeInnerHiddenLayerNeurons
loop NumberOfInnerHiddenLayers
InnerHiddenLayerManager -> InnerHiddenLayerType : initializeNeurons
end
NeuralNet -> LastHiddenLayerType : initializeNeurons
NeuralNet -> OutputLayerType : initializeNeurons
NeuralNet -> RecurrentLayerType : initializeNeurons
NeuralNet -> TrainingPolicyType : initialize
TrainingPolicyType -> TransferFunctionsPolicy : initialLearningRate
TrainingPolicyType -> TransferFunctionsPolicy : initialMomentumRate
TrainingPolicyType -> TransferFunctionsPolicy : initialAccelerationRate
NeuralNet -> InputLayerType : initializeWeights
loop NumberOfNeurons
InputLayerType -> Neuron : initializeWeights
loop NumberOfOutgoingConnections
Neuron -> TransferFunctionsPolicy : generateRandomWeight
end
end
NeuralNet -> InnerHiddenLayerManager : initializeInnerHiddenLayerWeights
loop NumberOfInnerHiddenLayers
InnerHiddenLayerManager -> InnerHiddenLayerType : initializeWeights
loop NumberOfNeurons
InnerHiddenLayerType -> Neuron : initializeWeights
loop NumberOfOutgoingConnections
Neuron -> TransferFunctionsPolicy : generateRandomWeight
end
end
end
NeuralNet -> LastHiddenLayerType : initializeWeights
loop NumberOfNeurons
LastHiddenLayerType -> Neuron : initializeWeights
loop NumberOfOutgoingConnections
Neuron -> TransferFunctionsPolicy : generateRandomWeight
end
end
NeuralNet -> OutputLayerType : initializeWeights
loop NumberOfNeurons
OutputLayerType -> Neuron : initializeWeights
loop NumberOfOutgoingConnections
Neuron -> TransferFunctionsPolicy : generateRandomWeight
end
end
NeuralNet -> RecurrentLayerType : initializeWeights
loop NumberOfNeurons
RecurrentLayerType -> Neuron : initializeWeights
loop NumberOfOutgoingConnections
Neuron -> TransferFunctionsPolicy : generateRandomWeight
end
end
@enduml