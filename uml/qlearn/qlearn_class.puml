@startuml
class DefaultRewardPolicy {
    +ValueType getRewardForStateAndAction(const size_t state, const size_t action) const
    +void setRewardForStateAndAction(const size_t state, const size_t action, const ValueType& reward)
    -ValueType mRewardTable[NumberOfStates][NumberOfActions]
}
RewardPolicy <|-- DefaultRewardPolicy

class QLearningEnvironment::experience_t {
    +size_t state
    +size_t action
    +ValueType reward
    +size_t newState
}

class QLearningEnvironment {
    #ValueType mLearningRate;
    #ValueType mDiscountFactor;
    #size_t mRandomActionDecisionPoint;
    #RandomNumberGeneratorPolicy mRandomNumberGenerator;
    #RewardPolicy mRewardPolicy;
}
QLearningEnvironment <|-- EnvironmentType
QLearningEnvironment -- RewardPolicy

class QLearner {
    +void updateFromExperience(const QLearningEnvironment::experience_t& experience)
    -EnvironmentType mEnvironment
    -StateType mState
    -ValueType mAccumulatedReward
    -QValuePolicy mQValuePolicy
}

QLearner -- StateToActionPolicy
QLearner *-- EnvironmentType
QLearner *-- QValuePolicy
QLearner -- QLearningEnvironment::experience_t

class QTablePolicy {
    +ValueType getQValue(const size_t state, const size_t action) const
    +void setQValue(const size_t state, const size_t action, const ValueType& value)
    -ValueType mQTable[EnvironmentType::EnvironmentNumberOfStates][EnvironmentType::EnvironmentNumberOfActions]
}
QValuePolicy <|-- QTablePolicy

class StateToActionPolicy {
    +{static} size_t selectActionForState()
}

StateToActionPolicy <|-- ArgMaxPolicy

StateToActionPolicy -- QValuePolicy

@enduml